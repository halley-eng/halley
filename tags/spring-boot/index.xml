<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring-boot on 月亮</title><link>https://halley-eng.github.io/halley/tags/spring-boot/</link><description>Recent content in spring-boot on 月亮</description><generator>Hugo -- gohugo.io</generator><language>zh_CN</language><lastBuildDate>Tue, 22 Dec 2020 21:39:16 +0800</lastBuildDate><atom:link href="https://halley-eng.github.io/halley/tags/spring-boot/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring-Boot启动分析</title><link>https://halley-eng.github.io/halley/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/spring-boot%E5%90%AF%E5%8A%A8%E5%88%86%E6%9E%90/</link><pubDate>Tue, 22 Dec 2020 21:39:16 +0800</pubDate><guid>https://halley-eng.github.io/halley/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/spring-boot%E5%90%AF%E5%8A%A8%E5%88%86%E6%9E%90/</guid><description>以常见的SpringBoot 工程启动类举例
@SpringBootApplication(scanBasePackages = {&amp;#34;com.xxx.xxx.xxx&amp;#34;}) @EnableAspectJAutoProxy @EnableConfigCenter @EnableMbean @EnableScheduling public class FcXxxApplication { public static void main(String[] args) throws Exception { SpringApplication.run(FcXxxApplication.class, args); Runtime.getRuntime().addShutdownHook(new AppShutdownHook()); } } 这里简单的通过 SpringApplication#run 就可以启动Spring 容器, 并让其运行在 Web 容器中;
下面是其核心源码
public ConfigurableApplicationContext run(String... args) { // 1. 计数器初始化并启动 StopWatch stopWatch = new StopWatch(); stopWatch.start(); ConfigurableApplicationContext context = null; Collection&amp;lt;SpringBootExceptionReporter&amp;gt; exceptionReporters = new ArrayList&amp;lt;&amp;gt;(); configureHeadlessProperty(); // 2. 加载并启动监听器 SpringApplicationRunListeners listeners = getRunListeners(args); listeners.starting(); try { ApplicationArguments applicationArguments = new DefaultApplicationArguments(args); // 3.</description></item></channel></rss>